apply plugin: 'com.android.application'
apply plugin: 'kotlin-android'
apply plugin: 'kotlin-android-extensions'
apply plugin: 'kotlin-kapt'
//def config = rootProject.extensions.getByName("ext")
//打包时间
static def releaseTime() {
    return new Date().format("yyyy-MM-dd_HH_mm_ss", TimeZone.getDefault())
}
//获取local.properties的内容
Properties properties = new Properties()
properties.load(project.rootProject.file('local.properties').newDataInputStream())

android {
    compileSdkVersion ANDROID_COMPILE_SDK_VERSION
    //buildToolsVersion ANDROID_BUILD_TOOLS_VERSION
    //每个产品公共属性
    defaultConfig {
        applicationId "com.style.framework"
        minSdkVersion ANDROID_MIN_SDK_VERSION
        targetSdkVersion ANDROID_TARGET_SDK_VERSION
        versionCode 5
        versionName '1.1.5'
        multiDexEnabled true //突破应用方法数65535的一个限制
        testInstrumentationRunner "android.support.test.runner.AndroidJUnitRunner"
        /*externalNativeBuild {
            cmake {
                cppFlags "-frtti -fexceptions"
            }
        }*/
        /*  ndk {
            moduleName "helloNDK"
            abiFilters "armeabi", "armeabi-v7a", "arm64-v8a"
        }*/
    }
    //多维度
    flavorDimensions "model", "version"
    productFlavors {
        _sharp_s2 {
            dimension "model"
        }
        _sharp_s3 {
            dimension "model"
        }
        _9_0_0 {
            dimension = "version"
            manifestPlaceholders = [ENVIRONMENT: "豌豆荚"]
        }
        _8_1_0 {
            dimension = "version"
            manifestPlaceholders = [ENVIRONMENT: "360"]
        }
    }
    android.applicationVariants.all { variant ->    //批量修改Apk名字
        variant.outputs.all { output ->
            def fileDir = "${project.rootDir.absolutePath}/publish/${variant.flavorName}/${variant.buildType.name}"
            //variant.getPackageApplication().outputDirectory = new File(fileDir)
            outputFileName = "${variant.flavorName}_v${variant.versionName}_${variant.buildType.name}_${releaseTime()}.apk"
        }
    }
    signingConfigs {
        debug {
            //storeFile file(properties.getProperty("STORE_FILE_DEBUG"))
            /*storePassword properties.getProperty("STORE_PASSWORD")
              keyAlias project.KEY_ALIAS
              keyPassword project.KEY_PASSWORD*/
            //v2SigningEnabled false
        }
        release {
            //郁闷手写就报错，在工程结构里配置就没问题，一模一样的写法
            /*storeFile file(properties.getProperty("STORE_FILE"))
            storePassword properties.getProperty("STORE_PASSWORD")
            keyAlias properties.getProperty("KEY_ALIAS")
            keyPassword properties.getProperty("KEY_PASSWORD")
            v2SigningEnabled false*/
        }
    }
    buildTypes {
        debug {
            buildConfigField("boolean", "LOG_ENABLE", "true")
            debuggable true
            jniDebuggable true
            minifyEnabled false
            zipAlignEnabled false
            //慎用，导致很多未知错误
            shrinkResources false
            //proguardFiles getDefaultProguardFile('proguard-android.txt'), 'proguard-rules.pro'
            signingConfig signingConfigs.debug
        }
        release {
            buildConfigField("boolean", "LOG_ENABLE", "false")
            debuggable false
            jniDebuggable false
            minifyEnabled false
            proguardFiles getDefaultProguardFile('proguard-android.txt'), 'proguard-rules.pro'
            signingConfig signingConfigs.release
        }
    }
    lintOptions {
        //  true--所有正式版构建执行规则生成崩溃的lint检查，如果有崩溃问题将停止构建
        checkReleaseBuilds true
        // true--错误发生后停止gradle构建
        abortOnError true
    }
    dataBinding {
        enabled = true
    }
/*  externalNativeBuild {
      cmake {
          path 'CMakeLists.txt'
      }
  }*/
    compileOptions {
        sourceCompatibility JavaVersion.VERSION_1_8
        targetCompatibility JavaVersion.VERSION_1_8
    }
}
/*
configurations.all {
    resolutionStrategy.eachDependency { DependencyResolveDetails details ->
        def requested = details.requested
        if (requested.group == 'com.squareup.okhttp3') {
            if (!requested.name.startsWith("okhttp")) {
                details.useVersion '3.8.1'
            }
        }
    }
}
*/

dependencies {
    implementation "org.jetbrains.kotlin:kotlin-stdlib-jdk7:$kotlin_version"
    //kapt 'com.android.databinding:compiler:3.1.4'
    testImplementation 'junit:junit:4.12'
    androidTestImplementation('com.android.support.test.espresso:espresso-core:2.2.2', {
        exclude group: 'com.android.support', module: 'support-annotations'
    })
    implementation 'com.android.support:multidex-instrumentation:1.0.3'
    implementation 'com.android.support:multidex:1.0.3'
    implementation "com.android.support:appcompat-v7:$ANDROID_SUPPORT_VERSION"
    implementation "com.android.support:support-v4:$ANDROID_SUPPORT_VERSION"
    implementation "com.android.support:support-vector-drawable:$ANDROID_SUPPORT_VERSION"
    implementation "com.android.support:cardview-v7:$ANDROID_SUPPORT_VERSION"
    implementation "com.android.support:design:$ANDROID_SUPPORT_VERSION"
    implementation "com.android.support:recyclerview-v7:$ANDROID_SUPPORT_VERSION"
    implementation 'com.android.support.constraint:constraint-layout:1.1.3'
    implementation 'android.arch.lifecycle:extensions:1.1.1'

    implementation 'com.alibaba:fastjson:1.2.30'
    implementation 'com.github.tbruyelle:rxpermissions:0.10.2'
    implementation 'io.reactivex.rxjava2:rxjava:2.1.7'
    implementation 'io.reactivex.rxjava2:rxandroid:2.0.1'
    implementation('com.squareup.retrofit2:retrofit:2.3.0', {
        exclude module: 'okhttp'
    })
    //compile 'com.squareup.retrofit2:converter-gson:2.3.0'
    implementation 'com.squareup.retrofit2:adapter-rxjava2:2.3.0'
    implementation 'com.squareup.okhttp3:logging-interceptor:3.9.1'
    implementation "android.arch.persistence.room:runtime:$room_version"
    kapt "android.arch.persistence.room:compiler:$room_version" // use kapt for Kotlin
    implementation 'org.simple:androideventbus:1.0.5.1'
    //java注解
    implementation 'org.glassfish:javax.annotation:10.0-b28'
    //implementation 'com.google.dagger:dagger:2.12'
    //kapt 'com.google.dagger:dagger-compiler:2.12'
    implementation 'com.github.bumptech.glide:glide:4.8.0'
    kapt 'com.github.bumptech.glide:compiler:4.8.0'
    implementation 'com.aliyun.ams:alicloud-android-hotfix:3.2.2'
    implementation 'com.github.chrisbanes:PhotoView:2.1.4'
    //implementation 'com.nineoldandroids:library:2.4.0'
    //compile fileTree(dir: 'libs', include: ['*.jar'])
    implementation files('libs/pinyin4j-2.5.0.jar')
    // optional - RxJava support for Room
    //implementation "android.arch.persistence.room:rxjava2:$room_version"
    // optional - Guava support for Room, including Optional and ListenableFuture
    //implementation "android.arch.persistence.room:guava:$room_version"
    // Test helpers
    //testImplementation "android.arch.persistence.room:testing:$room_version"
    implementation project(':libImageCrop')
    implementation project(':libMediaPicker')
    implementation project(':libRefreshView')
    implementation project(':libSafeKeyboard')
    implementation project(':libVideoRecord')
    implementation project(':libWheelPicker')
    implementation project(':libWheelView')
    implementation project(':libZxing')

}
